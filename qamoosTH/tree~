<!DOCTYPE html>
<html>
    <head>
        <title>Radial Cluster Demo</title>
    <script src="http://d3js.org/d3.v3.min.js"></script>
    <script type="application/javascript" src="latestdata.js"></script>
        <style>
            svg {
                border: solid 0px #ccc;
                font: 10px sans-serif;
            }
            .link {
                fill: none;
                stroke: #ccc;
                stroke-width: 1.5px;
            }
        </style>
    </head>
    <body>
 
        <div id="viz"></div>
 
        <script type="text/javascript">


// setup the data

var places = ["Gaza City", "Khan Younis", "Rafah", "Beit Hanoun", "Jabalia", "Shujaeyya"];

var daysJuly = [8,9,10,11,12,13,14,15,16,17,18,19,20,21];

var ages = [0];

for( i=0;i<33;i++){ 
	ages[i+1] = ages[i] + 2;
}

var families = ["Siyam", "alKilani", "alHallaq", "Ziada"];

var countDays = Array.apply(null, new Array(daysJuly.length)).map(Number.prototype.valueOf,0);
var countPlaces = Array.apply(null, new Array(places.length)).map(Number.prototype.valueOf,0);
var countAges = Array.apply(null, new Array(ages.length)).map(Number.prototype.valueOf,0);

var family =[ ["empty"]];

for ( i=0; i< families.length; i++){
	family.push(["empty"])
};

// looping over the data only once
for( i=0 ; i< data.length ; i++){

	
	for( j=0 ; j< daysJuly.length ; j++){
		if (data[i].day == daysJuly[j] ){ 
		countDays[j]++;
		}
	}
	for( j=0 ; j< places.length ; j++){
		if (data[i].place.indexOf(places[j]) >= 0){ 
		countPlaces[j]++;
		}
	}

	for( j=0 ; j< ages.length ; j++){
		if (data[i].age == ages[j] || data[i].age == ages[j]-1){ 
		countAges[j]++;
		}
	}

	for( j=0 ; j< families.length ; j++){
		if (data[i].name.indexOf(families[j]) >= 0){ 
			if (family[j][0] == "empty")
			{ family[j][0] = data[1].name ;}
			else
			{ family[j].push(data[i].name);}
		}
	}


}

//var sumNotOther = 0;
//for( i=0;i<countPlaces.length;i++){ sumNotOther += countPlaces[i];}

//countPlaces[countPlaces.length-1] = data.length - sumNotOther;  



// setup the data for visualization


var palcolor = ["rgb(255,0,0)", "rgb(0,255,0)","rgb(0,0,0)"];
var palecolor = ["rgba(255,0,0,0.8)", "rgba(0,255,0,0.8)","rgba(0,0,0,0.8)"];

var placeData = [];

for ( i=0; i< places.length; i++){
	placeData[i] ={
		value : countPlaces[i],
		label : places[i],	
		color : palecolor[i%3],
		highlight :  palcolor[i%3]
	};
}

console.log(family); 
/*
var mytreeData = {"name" : null , "children" : [
                            {"name" : "Al 12 - Gaza" },
                            {"name" : "Al 13 - Khan Younis", 
					"children": [
					{"name" : "ahmed"},
					{"name" : "moahmmed"} 
					]},				
						
                            {"name" : 14 , "children" :[]},
                            {"name" : "Al 15" },
                            {"name" : "Al 16" }
                   
                        ]};
*/
var aname = "a name";
var topush = {"name" : aname};  

var firstfamilyfirstname = {"name" : family[0][0]};
var startTree = [ {"name" : families[0], "children": [firstfamilyfirstname] } ];

/*
startTree[0]["name"] = families[0];
startTree[1] = startTree[0];
startTree[1]["name"] = families[1];
startTree[1]["children"] = [topush]; 
startTree[1]["children"].push(topush);

*/
for( var i=0 ; i< families.length -2; i++){
 	startTree[i] = startTree[0];
	startTree[i]["name"] = families[i];
	startTree[i]["children"][0]["name"] = family[i][0]; 

	for( j=1 ; j< family[i].length ; j++){	
		var newName = {"name" : family[i][j]}; 
		startTree[i]["children"].push(newName);
	}

}
var mytreeData = { "name" : " my tree", "info" : "tst", "children" : startTree};

//console.log(startTree); 


            //JSON object with the data
            var treeData = {"name" : "A", "info" : "tst", "children" : [
                    {"name" : "A1", "children" : [
                            {"namse" : "A12" },
                            {"name" : "A13" },
                            {"nasme" : "A14" },
                            {"name" : "A15" },
                            {"name" : "A16" }
                        ] },
                    {"name" : "A2", "children" : [
                            {"name" : "A21" },
                            {"name" : "A22", "children" : [
                            {"name" : "A221" },
                            {"name" : "A222" },
                            {"name" : "A223" },
                            {"name" : "A22" }
                        ]},
                            {"name" : "A23" },
                            {"name" : "A24" },
                            {"name" : "A25" }] },
                    {"name" : "A3", "children": [
                            {"name" : "A31", "children" :[
                                    {"name" : "A311" },
                                    {"name" : "A312" },
                                    {"name" : "A313" },
                                    {"name" : "A314" },
                                    {"name" : "A315" }
                                ]}] }
                ]};
console.log(mytreeData); 
console.log(treeData); 
 
            // Create a svg canvas
            var vis = d3.select("#viz").append("svg:svg")
            .attr("width", 800)
            .attr("height", 800)
            .append("svg:g")
            .attr("transform", "translate(200, 200)");
 
            // Create a cluster "canvas"
            var cluster = d3.layout.cluster()
            .size([300,150]);
 
            var diagonal = d3.svg.diagonal.radial()
            .projection(function(d) { return [d.y, d.x / 180 * Math.PI]; });
 
            var nodes = cluster.nodes(mytreeData);
            //var nodes = cluster.nodes(treeData);
            var links = cluster.links(nodes);
 
            var link = vis.selectAll("pathlink")
            .data(links)
            .enter().append("svg:path")
            .attr("class", "link")
            .attr("d", diagonal)
 
            var node = vis.selectAll("g.node")
            .data(nodes)
            .enter().append("svg:g")
            .attr("transform", function(d) { return "rotate(" + (d.x/10 - 90) + ")translate(" + d.y/10 + ")"; })
 
            // Add the dot at every node
            node.append("svg:circle")
            .attr("r", 3.5);
 
            node.append("svg:text")
            .attr("dx", function(d) { return d.x < 180 ? 8 : -8; })
            .attr("dy", ".31em")
            .attr("text-anchor", function(d) { return d.x < 180 ? "start" : "end"; })
            .attr("transform", function(d) { return d.x < 180 ? null : "rotate(180)"; })
            .text(function(d) { return d.name; });
        </script>
    </body>
</html>
